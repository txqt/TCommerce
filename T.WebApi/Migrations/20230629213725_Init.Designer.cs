// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T.WebApi.Database.ConfigurationDatabase;

#nullable disable

namespace T.WebApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230629213725_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("T.Library.Model.Common.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("bit");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOnUtc = new DateTime(2023, 6, 29, 21, 37, 23, 284, DateTimeKind.Utc).AddTicks(3446),
                            Deleted = false,
                            DisplayOrder = 0,
                            IncludeInTopMenu = false,
                            ManuallyPriceRange = false,
                            Name = "Thời trang",
                            ParentCategoryId = 0,
                            PictureId = 0,
                            PriceFrom = 0m,
                            PriceRangeFiltering = false,
                            PriceTo = 0m,
                            Published = false,
                            ShowOnHomepage = false,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOnUtc = new DateTime(2023, 6, 29, 21, 37, 23, 284, DateTimeKind.Utc).AddTicks(3451),
                            Deleted = false,
                            DisplayOrder = 0,
                            IncludeInTopMenu = false,
                            ManuallyPriceRange = false,
                            Name = "Điện tử",
                            ParentCategoryId = 0,
                            PictureId = 0,
                            PriceFrom = 0m,
                            PriceRangeFiltering = false,
                            PriceTo = 0m,
                            Published = false,
                            ShowOnHomepage = false,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOnUtc = new DateTime(2023, 6, 29, 21, 37, 23, 284, DateTimeKind.Utc).AddTicks(3452),
                            Deleted = false,
                            DisplayOrder = 0,
                            IncludeInTopMenu = false,
                            ManuallyPriceRange = false,
                            Name = "Điện gia dụng",
                            ParentCategoryId = 0,
                            PictureId = 0,
                            PriceFrom = 0m,
                            PriceRangeFiltering = false,
                            PriceTo = 0m,
                            Published = false,
                            ShowOnHomepage = false,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOnUtc = new DateTime(2023, 6, 29, 21, 37, 23, 284, DateTimeKind.Utc).AddTicks(3453),
                            Deleted = false,
                            DisplayOrder = 0,
                            IncludeInTopMenu = false,
                            ManuallyPriceRange = false,
                            Name = "Âm thanh",
                            ParentCategoryId = 0,
                            PictureId = 0,
                            PriceFrom = 0m,
                            PriceRangeFiltering = false,
                            PriceTo = 0m,
                            Published = false,
                            ShowOnHomepage = false,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedOnUtc = new DateTime(2023, 6, 29, 21, 37, 23, 284, DateTimeKind.Utc).AddTicks(3454),
                            Deleted = false,
                            DisplayOrder = 0,
                            IncludeInTopMenu = false,
                            ManuallyPriceRange = false,
                            Name = "Phụ kiện",
                            ParentCategoryId = 0,
                            PictureId = 0,
                            PriceFrom = 0m,
                            PriceRangeFiltering = false,
                            PriceTo = 0m,
                            Published = false,
                            ShowOnHomepage = false,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("T.Library.Model.Common.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("T.Library.Model.Orders.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RentalEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RentalStartDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShoppingCartType")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserEnteredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("T.Library.Model.Orders.ShoppingCartItemAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartItemId");

                    b.ToTable("ShoppingCartItemAttributeValue");
                });

            modelBuilder.Entity("T.Library.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowUserReviews")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("bit");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("bit");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Áo thun nam",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 200000m,
                            Published = false,
                            ShortDescription = "Áo thun nam hàng hiệu",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 2,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Áo khoác nữ",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 500000m,
                            Published = false,
                            ShortDescription = "Áo khoác dành cho nữ thời trang",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 3,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Quần jean nam",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 400000m,
                            Published = false,
                            ShortDescription = "Quần jean nam hàng hiệu",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 4,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Váy đầm dự tiệc",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 1000000m,
                            Published = false,
                            ShortDescription = "Váy đầm dự tiệc sang trọng",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 5,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Giày thể thao nam",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 800000m,
                            Published = false,
                            ShortDescription = "Giày thể thao nam Adidas",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 6,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Giày cao gót nữ",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 700000m,
                            Published = false,
                            ShortDescription = "Giày cao gót nữ đẹp",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 7,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Túi xách nữ",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 600000m,
                            Published = false,
                            ShortDescription = "Túi xách nữ hàng hiệu",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 8,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Mũ len nam",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 100000m,
                            Published = false,
                            ShortDescription = "Mũ len nam giữ ấm",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 9,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Khẩu trang y tế",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 5000m,
                            Published = false,
                            ShortDescription = "Khẩu trang y tế 3 lớp",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 10,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Balo laptop",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 900000m,
                            Published = false,
                            ShortDescription = "Balo laptop chống sốc",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 11,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Tủ lạnh",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 15000000m,
                            Published = false,
                            ShortDescription = "Tủ lạnh side by side LG",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 12,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Máy giặt",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 10000000m,
                            Published = false,
                            ShortDescription = "Máy giặt Samsung",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 13,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Điều hòa",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 8000000m,
                            Published = false,
                            ShortDescription = "Điều hòa Panasonic Inverter",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 14,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Tivi OLED",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 30000000m,
                            Published = false,
                            ShortDescription = "Tivi OLED Sony 65 inch",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 15,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Máy ảnh DSLR",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 15000000m,
                            Published = false,
                            ShortDescription = "Máy ảnh Canon EOS 90D",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 16,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Loa bluetooth",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 2000000m,
                            Published = false,
                            ShortDescription = "Loa bluetooth JBL Flip 5",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 17,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Tai nghe true wireless",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 5000000m,
                            Published = false,
                            ShortDescription = "Tai nghe true wireless Apple AirPods Pro",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        },
                        new
                        {
                            Id = 18,
                            AllowUserReviews = false,
                            AvailableForPreOrder = false,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            DisableBuyButton = false,
                            DisableWishlistButton = false,
                            DisplayOrder = 0,
                            FullDescription = "Full Description",
                            Height = 0m,
                            IsFreeShipping = false,
                            IsShipEnabled = false,
                            Length = 0m,
                            MarkAsNew = false,
                            Name = "Chuột gaming",
                            NotReturnable = false,
                            OldPrice = 0m,
                            OrderMaximumQuantity = 0,
                            OrderMinimumQuantity = 0,
                            Price = 1000000m,
                            Published = false,
                            ShortDescription = "Chuột gaming",
                            ShowOnHomepage = false,
                            StockQuantity = 0,
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisibleIndividually = false,
                            Weight = 0m,
                            Width = 0m
                        });
                });

            modelBuilder.Entity("T.Library.Model.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttribute");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "Thuộc tính màu sắc của sản phẩm",
                            Name = "Màu sắc"
                        });
                });

            modelBuilder.Entity("T.Library.Model.ProductAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionAttributeSelected")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TextPrompt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("int");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductAttribute_Mapping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            AttributeControlTypeId = 0,
                            ConditionAttributeSelected = 0,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsRequired = false,
                            ProductAttributeId = 1,
                            ProductId = 18
                        });
                });

            modelBuilder.Entity("T.Library.Model.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorSquaresRgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CustomerEntersQty")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnType("bit");

                    b.Property<int>("ProductAttributeMappingId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeMappingId");

                    b.ToTable("ProductAttributeValue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Đỏ",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 1,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        },
                        new
                        {
                            Id = 2,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Xanh",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 1,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        },
                        new
                        {
                            Id = 3,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Vàng",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 1,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        },
                        new
                        {
                            Id = 4,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Tím",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 2,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        },
                        new
                        {
                            Id = 5,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Đen",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 2,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        },
                        new
                        {
                            Id = 6,
                            Cost = 0m,
                            CustomerEntersQty = false,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsPreSelected = false,
                            Name = "Vàng",
                            PictureId = 0,
                            PriceAdjustment = 0m,
                            PriceAdjustmentUsePercentage = false,
                            ProductAttributeMappingId = 2,
                            Quantity = 0,
                            WeightAdjustment = 0m
                        });
                });

            modelBuilder.Entity("T.Library.Model.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductCategory_Mapping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Deleted = false,
                            DisplayOrder = 0,
                            IsFeaturedProduct = false,
                            ProductId = 18
                        });
                });

            modelBuilder.Entity("T.Library.Model.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductPicture_Mapping");
                });

            modelBuilder.Entity("T.Library.Model.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerNotifiedOfReply")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("HelpfulNoTotal")
                        .HasColumnType("int");

                    b.Property<int>("HelpfulYesTotal")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReplyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("T.Library.Model.ProductReviewHelpfulness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int");

                    b.Property<bool>("WasHelpful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("ProductReviewHelpfulness");
                });

            modelBuilder.Entity("T.Library.Model.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("T.Library.Model.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("T.Library.Model.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("T.Library.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("T.Library.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("T.Library.Model.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T.Library.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("T.Library.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("T.Library.Model.Orders.ShoppingCartItemAttributeValue", b =>
                {
                    b.HasOne("T.Library.Model.Orders.ShoppingCartItem", "ShoppingCartItem")
                        .WithMany("ShoppingCartItemAttributeValues")
                        .HasForeignKey("ShoppingCartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCartItem");
                });

            modelBuilder.Entity("T.Library.Model.ProductAttributeMapping", b =>
                {
                    b.HasOne("T.Library.Model.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T.Library.Model.Product", "Product")
                        .WithMany("AttributeMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("T.Library.Model.ProductAttributeValue", b =>
                {
                    b.HasOne("T.Library.Model.ProductAttributeMapping", "ProductAttributeMappings")
                        .WithMany("ProductAttributeValue")
                        .HasForeignKey("ProductAttributeMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeMappings");
                });

            modelBuilder.Entity("T.Library.Model.ProductCategory", b =>
                {
                    b.HasOne("T.Library.Model.Common.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T.Library.Model.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("T.Library.Model.ProductPicture", b =>
                {
                    b.HasOne("T.Library.Model.Common.Picture", "Picture")
                        .WithMany("ProductPictures")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T.Library.Model.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("T.Library.Model.ProductReview", b =>
                {
                    b.HasOne("T.Library.Model.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("T.Library.Model.ProductReviewHelpfulness", b =>
                {
                    b.HasOne("T.Library.Model.ProductReview", "ProductReview")
                        .WithMany("HelpfulHelpfulness")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("T.Library.Model.Common.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("T.Library.Model.Common.Picture", b =>
                {
                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("T.Library.Model.Orders.ShoppingCartItem", b =>
                {
                    b.Navigation("ShoppingCartItemAttributeValues");
                });

            modelBuilder.Entity("T.Library.Model.Product", b =>
                {
                    b.Navigation("AttributeMappings");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("T.Library.Model.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeMappings");
                });

            modelBuilder.Entity("T.Library.Model.ProductAttributeMapping", b =>
                {
                    b.Navigation("ProductAttributeValue");
                });

            modelBuilder.Entity("T.Library.Model.ProductReview", b =>
                {
                    b.Navigation("HelpfulHelpfulness");
                });
#pragma warning restore 612, 618
        }
    }
}
